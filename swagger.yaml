swagger: '2.0'
info:
  version: '1.0.0'
  title: Backend for a family tree wiki with face images
basePath: /v1

securityDefinitions:
  oauth2:
    type: oauth2
    flow: implicit
    authorizationUrl: https://example.com/oauth2/dialog
    x-tokenInfoFunc: app.token_info
    scopes:
      read: Read only user
      user: Normal user
      admin: Superuser

security:
  - oauth2: ['user']

paths:
  /users/login/password:
    post:
      summary: Login with password
      operationId: app.login_password
      security: [ ]
      responses:
        200:
          description: Login successfull
          schema:
            type: object
            properties:
              token:
                description: Authetication token to be used in future requests
                type: string

        401:
          description: Login failed
      parameters:
        - in: body
          name: credentials
          required: true
          schema:
            type: object
            required:
              - email
              - password
            properties:
              email:
                type: string
              password:
                type: string

  /users/invite:
    post:
      summary: Invite a new user or reinvite an old user (resets password)
      operationId: app.user_invite
      responses:
        200:
          description: Successfull
      parameters:
        - in: body
          name: who
          required: true
          schema:
            type: object
            required:
              - email
              - individual
            properties:
              email:
                type: string
              individual:
                type: string

  /users/password:
    post:
      summary: Change the password of a user
      operationId: app.user_password
      responses:
        200:
          description: Successfull
        401:
          description: Old password does not match
      parameters:
        - in: body
          name: passwords
          required: true
          schema:
            type: object
            required:
              - old
              - new
            properties:
              email:
                type: string
              old:
                type: string
              new:
                type: string

  /records:
    get:
      summary: Get latest version of all records not deleted
      operationId: app.list_live_records
      produces:
        - application/json;
      responses:
        200:
          description: List of records
          schema:
            type: array
            items:
              - $ref: '#/definitions/Record'
    post:
      summary: Create a new (possible the first) version of a record
      operationId: app.post_record
      produces:
        - application/json;
      responses:
        200:
          description: The created record with id and version updated
          schema:
            $ref: '#/definitions/Record'
        400:
          description: Bad
      parameters:
        - name: record
          in: body
          required: true
          schema:
            $ref: '#/definitions/Record'


  /records/{id}:
    get:
      summary: Get latest version of records with id
      operationId: app.get_latest_record
      produces:
        - application/json;
      responses:
        200:
          description: Record
          schema:
            $ref: '#/definitions/Record'
        404:
          description: Not found
      parameters:
        - name: id
          in: path
          description: Id of the record to get.
          required: true
          type: string

    delete:
      summary: Mark the record with id as deleted
      operationId: app.delete_record
      produces:
        - text/plain;
      responses:
        200:
          description: Deleted
        404:
          description: Not found
      parameters:
        - name: id
          in: path
          description: Id of the record to delete.
          required: true
          type: string


  /records/{id}/{version}:
    get:
      summary: Get specific version of records with id
      operationId: app.get_record
      produces:
        - application/json;
      responses:
        200:
          description: Record
          schema:
            $ref: '#/definitions/Record'
        404:
          description: Not found
      parameters:
        - name: id
          in: path
          description: Id of the record to get.
          required: true
          type: string
        - name: version
          in: path
          description: Version of the record to get.
          required: true
          type: string

  /updates/{since}:
    get:
      summary: Longpoll for getting record updates
      operationId: app.get_record_updates
      produces:
        - application/json;
      responses:
        200:
          description: Record
          schema:
            type: object
            properties:
              since:
                type: string
              records:
                type: array
                items:
                  - $ref: '#/definitions/Record'
        400:
          description: Bad since token
      parameters:
        - name: since
          in: path
          description: Token specifying how old updates to return. Set it to 'NOW' for the first request and then to the since property of previous responses.
          required: true
          type: string

  /history/{before}/{limit}:
    get:
      summary: Get the history of the data as an array of records
      description: The history will start with the most recent version of all of thes record and then progress backward in time.
      operationId: app.get_record_history
      produces:
        - application/json;
      responses:
        200:
          description: Record
          schema:
            type: object
            properties:
              before:
                type: string
              records:
                type: array
                items:
                  - $ref: '#/definitions/Record'
        400:
          description: Bad before token
      parameters:
        - name: before
          in: path
          description: Token specifying how old records to return. Set it to 'NOW' for the first request and then to the before property of previous responses.
          required: true
          type: string
        - name: limit
          in: path
          description: The maximum number of records to return.
          required: true
          type: string

  /images:
    post:
      summary: Create a new image
      operationId: app.post_image
      produces:
        - application/json;
      consumes:
         - image/jpeg
      responses:
        200:
          description: Ok
        400:
          description: Bad
      parameters:
        - name: image
          in: body
          required: true
          schema:
            type: string
            format: binary

  /images/{id}/crop:
    post:
      summary: Create a new image by cropping an existing image
      operationId: app.image_crop
      produces:
        - application/json;
      responses:
        200:
          description: The created record with id and version updated
          schema:
            $ref: '#/definitions/Record'
        400:
          description: Bad
      parameters:
        - name: id
          in: path
          description: Id of image to crop.
          required: true
          type: string
        - name: box
          in: body
          required: true
          schema:
            type: object
            required:
              - left
              - upper
              - right
              - lower
            properties:
              left:
                type: integer
              upper:
                type: integer
              right:
                type: integer
              lower:
                type: integer


  /images/{id}/{width}.jpg:
    get:
      summary: Get specific image with id
      operationId: app.get_image
      produces:
        - image/jpeg;
      responses:
        200:
          description: Ok
        404:
          description: Not found
      parameters:
        - name: id
          in: path
          description: Id of image to get.
          required: true
          type: string
        - name: width
          in: path
          description: Width of image in pixels or "thumb" for default thumbnail size (256 pixels wide), "full" for default fullscreen size (1024 pixels wide) or "original" for the originaly upladed image.
          required: true
          type: string

definitions:
  Event:
    type: object
    properties:
      eventType:
        description: One of 'Birth', 'Residence', 'Death', 'Burial'
        type: string
      date:
        type: string
      place:
        type: string
      from:
        description: Year - start of event
        type: integer
      to:
        description: Year - end of event - if range
        type: integer
      lat:
        description: Geocoordinate latitude of place
        type: number
      long:
        description: Geocoordinate longitude of place
        type: number

  ImageObj:
    type: array
    items:
      - type: string
        description: Date image was taken
      - type: string
        description: Id of Image object

  Record:
    type: object
    properties:
      id:
        type: string
      version:
        description: A timestamp in ms since the epoch with the creation time of this cersion of the record
        type: string
      type:
        description: Either Individual or Family or ... specifying what kind of record it is
        type: string
      author:
        description: The id of the Individual that created this version of the record
        type: string
    example:
      id: "bb8de34a-4a09-11e8-8405-b8ca3a86c404"
      version: "1524826672100"
      type: "Individual"

  Individual:
    allOf:
      - $ref: "#/definitions/Record"
      - type: object
        properties:
          sex:
            description: Contains 'M' for males, 'F' for females
            type: string
          name:
            type: string
          gedId:
            description: Gramps id
            type: string
          color:
            description: Branch of Petri
            type: string
          birth:
            $ref: "#/definitions/Event"
          death:
            $ref: "#/definitions/Event"
          imageIds:
            type: array
            items:
              - $ref: '#/definitions/ImageObj'
          location:
            type: array
            items:
              - $ref: '#/definitions/Event'
          notes:
            type: string

  Family:
    allOf:
      - $ref: "#/definitions/Record"
      - type: object
        properties:
          husband:
            description: Id of Induvidual object
            type: string
          wife:
            description: Id of Induvidual object
            type: string
          children:
            type: array
            items:
              - type: string
                description: Id of Induvidual object
          marriage:
            type: array
            items:
              - $ref: '#/definitions/Event'

