swagger: '2.0'
info:
  version: '1.0.0'
  title: Backend for a family tree wiki with face images
basePath: /v1

securityDefinitions:
  oauth2:
    type: oauth2
    flow: implicit
    authorizationUrl: https://example.com/oauth2/dialog
    x-tokenInfoFunc: app.token_info
    scopes:
      read: Read access
      write: Write access

security:
  - oauth2: ['read']

paths:
  /login_password:
    get:
      summary: Login with password
      operationId: app.login_password
      security: [ ]
      responses:
        200:
          description: Login successfull
          schema:
            type: object
            properties:
              token:
                type: string

        401:
          description: Login failed

  /record:
    get:
      summary: Get latest version of all records not deleted
      operationId: app.list_live_records
      produces:
        - application/json;
      responses:
        200:
          description: List of records
          schema:
            type: array
            items:
              - $ref: '#/definitions/Record'

  /record/{id}:
    get:
      summary: Get latest version of records with id
      operationId: app.get_latest_record
      produces:
        - application/json;
      responses:
        200:
          description: Record
          schema:
            $ref: '#/definitions/Record'
        404:
          description: Not found
      parameters:
        - name: id
          in: path
          description: Id of the record to get.
          required: true
          type: string
    put:
      summary: Create a new (possible the first) version of a record
      operationId: app.put_record
      produces:
        - application/json;
      security:
        - oauth2: ['write']
      responses:
        200:
          description: The created record with id and version updated
          schema:
            $ref: '#/definitions/Record'
      parameters:
        - name: id
          in: path
          description: Id of the record to get.
          required: true
          type: string
    delete:
      summary: Mark the record with id as deleted
      operationId: app.delete_record
      produces:
        - text/plain;
      security:
        - oauth2: ['write']
      responses:
        200:
          description: Deleted
        404:
          description: Not found
      parameters:
        - name: id
          in: path
          description: Id of the record to delete.
          required: true
          type: string


  /record/{id}/{version}:
    get:
      summary: Get specific version of records with id
      operationId: app.get_record
      produces:
        - application/json;
      responses:
        200:
          description: Record
          schema:
            $ref: '#/definitions/Record'
        404:
          description: Not found
      parameters:
        - name: id
          in: path
          description: Id of the record to get.
          required: true
          type: string
        - name: version
          in: path
          description: Version of the record to get.
          required: true
          type: string

  /updates/{since}:
    get:
      summary: Longpoll for getting record updates
      operationId: app.get_record_updates
      produces:
        - application/json;
      responses:
        200:
          description: Record
          schema:
            type: object
            properties:
              since:
                type: string
              records:
                type: array
                items:
                  - $ref: '#/definitions/Record'
        400:
          description: Bad since token
      parameters:
        - name: since
          in: path
          description: Token specifying how old updates to return. Set it to 'NOW' for the first request and then to the since property of previous responses.
          required: true
          type: string

  /image/{id}:
    get:
      summary: Get specific image with id
      operationId: app.get_image
      produces:
        - image/jpeg;
      responses:
        200:
          description: Ok
        404:
          description: Not found
      parameters:
        - name: id
          in: path
          description: Id of image to get.
          required: true
          type: string
    put:
      summary: Create a new image with id
      operationId: app.put_image
      produces:
        - image/jpeg;
      security:
        - oauth2: ['write']
      responses:
        200:
          description: Ok
        401:
          description: The image already excists. We dont allow it to be overwritten.
      parameters:
        - name: id
          in: path
          description: Id of image to get.
          required: true
          type: string



definitions:
  Event:
    type: object
    properties:
      date:
        type: string
      place:
        type: string

  Record:
    type: object
    properties:
      id:
        type: string
      version:
        description: A timestamp in ms since the epoch with the creation time of this cersion of the record
        type: string
      type:
        description: Either Individual or Family specifying what kind of record it is
        type: string
      author:
        description: The id of the Individual that created this version of the record
        type: string
    example:
      id: "bb8de34a-4a09-11e8-8405-b8ca3a86c404"
      version: "1524826672100"
      type: "Individual"

  Individual:
    allOf:
      - $ref: "#/definitions/Record"
      - type: object
        properties:
          sex:
            description: Contains 'M' for males, 'F' for females
            type: string
          name:
            type: string
          birth:
            $ref: "#/definitions/Event"
          death:
            $ref: "#/definitions/Event"
          marriages:
            type: array
            items:
              - $ref: '#/definitions/Event'
          notes:
            type: string

          user_name:
            type: string
          email:
            type: string
          password:
            type: string

  Family:
    allOf:
      - $ref: "#/definitions/Record"
      - type: object
        properties:
          husband:
            description: Id of Induvidual object
            type: string
          wife:
            description: Id of Induvidual object
            type: string
          children:
            type: array
            items:
              - type: string
                description: Id of Induvidual object
          marriage:
            type: array
            items:
              - $ref: '#/definitions/Event'

